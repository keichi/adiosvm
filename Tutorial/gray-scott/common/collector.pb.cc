// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#include "collector.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_collector_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Common_collector_2eproto;
class CommonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Common> _instance;
} _Common_default_instance_;
class TimerTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TimerTelemetry> _instance;
} _TimerTelemetry_default_instance_;
class DataSizeTelemetryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataSizeTelemetry> _instance;
} _DataSizeTelemetry_default_instance_;
class TelemetryReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TelemetryReply> _instance;
} _TelemetryReply_default_instance_;
static void InitDefaultsscc_info_Common_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Common_default_instance_;
    new (ptr) ::Common();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Common::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Common_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Common_collector_2eproto}, {}};

static void InitDefaultsscc_info_DataSizeTelemetry_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DataSizeTelemetry_default_instance_;
    new (ptr) ::DataSizeTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DataSizeTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DataSizeTelemetry_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DataSizeTelemetry_collector_2eproto}, {
      &scc_info_Common_collector_2eproto.base,}};

static void InitDefaultsscc_info_TelemetryReply_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TelemetryReply_default_instance_;
    new (ptr) ::TelemetryReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TelemetryReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TelemetryReply_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TelemetryReply_collector_2eproto}, {}};

static void InitDefaultsscc_info_TimerTelemetry_collector_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_TimerTelemetry_default_instance_;
    new (ptr) ::TimerTelemetry();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::TimerTelemetry::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TimerTelemetry_collector_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TimerTelemetry_collector_2eproto}, {
      &scc_info_Common_collector_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_collector_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_collector_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_collector_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_collector_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Common, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Common, app_name_),
  PROTOBUF_FIELD_OFFSET(::Common, step_),
  PROTOBUF_FIELD_OFFSET(::Common, elapsed_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TimerTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::TimerTelemetry, common_),
  PROTOBUF_FIELD_OFFSET(::TimerTelemetry, timer_type_),
  PROTOBUF_FIELD_OFFSET(::TimerTelemetry, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DataSizeTelemetry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DataSizeTelemetry, common_),
  PROTOBUF_FIELD_OFFSET(::DataSizeTelemetry, size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TelemetryReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Common)},
  { 8, -1, sizeof(::TimerTelemetry)},
  { 16, -1, sizeof(::DataSizeTelemetry)},
  { 23, -1, sizeof(::TelemetryReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Common_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TimerTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DataSizeTelemetry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_TelemetryReply_default_instance_),
};

const char descriptor_table_protodef_collector_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017collector.proto\"9\n\006Common\022\020\n\010app_name\030"
  "\001 \001(\t\022\014\n\004step\030\002 \001(\r\022\017\n\007elapsed\030\003 \001(\001\"[\n\016"
  "TimerTelemetry\022\027\n\006common\030\001 \001(\0132\007.Common\022"
  "\036\n\ntimer_type\030\002 \001(\0162\n.TimerType\022\020\n\010durat"
  "ion\030\003 \001(\001\":\n\021DataSizeTelemetry\022\027\n\006common"
  "\030\001 \001(\0132\007.Common\022\014\n\004size\030\002 \001(\004\"\020\n\016Telemet"
  "ryReply*>\n\tTimerType\022\013\n\007READ_IO\020\000\022\013\n\007COM"
  "PUTE\020\001\022\014\n\010WRITE_IO\020\002\022\t\n\005TOTAL\020\0032{\n\rYuzuC"
  "ollector\0221\n\013ReportTimer\022\017.TimerTelemetry"
  "\032\017.TelemetryReply\"\000\0227\n\016ReportDataSize\022\022."
  "DataSizeTelemetry\032\017.TelemetryReply\"\000b\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_collector_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_collector_2eproto_sccs[4] = {
  &scc_info_Common_collector_2eproto.base,
  &scc_info_DataSizeTelemetry_collector_2eproto.base,
  &scc_info_TelemetryReply_collector_2eproto.base,
  &scc_info_TimerTelemetry_collector_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_collector_2eproto_once;
static bool descriptor_table_collector_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto = {
  &descriptor_table_collector_2eproto_initialized, descriptor_table_protodef_collector_2eproto, "collector.proto", 444,
  &descriptor_table_collector_2eproto_once, descriptor_table_collector_2eproto_sccs, descriptor_table_collector_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_collector_2eproto::offsets,
  file_level_metadata_collector_2eproto, 4, file_level_enum_descriptors_collector_2eproto, file_level_service_descriptors_collector_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_collector_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_collector_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_collector_2eproto);
  return file_level_enum_descriptors_collector_2eproto[0];
}
bool TimerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void Common::InitAsDefaultInstance() {
}
class Common::_Internal {
 public:
};

Common::Common()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Common)
}
Common::Common(const Common& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_name().empty()) {
    app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  ::memcpy(&elapsed_, &from.elapsed_,
    static_cast<size_t>(reinterpret_cast<char*>(&step_) -
    reinterpret_cast<char*>(&elapsed_)) + sizeof(step_));
  // @@protoc_insertion_point(copy_constructor:Common)
}

void Common::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Common_collector_2eproto.base);
  app_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&elapsed_)) + sizeof(step_));
}

Common::~Common() {
  // @@protoc_insertion_point(destructor:Common)
  SharedDtor();
}

void Common::SharedDtor() {
  app_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Common::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Common& Common::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Common_collector_2eproto.base);
  return *internal_default_instance();
}


void Common::Clear() {
// @@protoc_insertion_point(message_clear_start:Common)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&elapsed_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&step_) -
      reinterpret_cast<char*>(&elapsed_)) + sizeof(step_));
  _internal_metadata_.Clear();
}

const char* Common::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string app_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_app_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Common.app_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 step = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          step_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double elapsed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          elapsed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Common::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Common)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_name = 1;
  if (this->app_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_name().data(), static_cast<int>(this->_internal_app_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Common.app_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_name(), target);
  }

  // uint32 step = 2;
  if (this->step() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_step(), target);
  }

  // double elapsed = 3;
  if (!(this->elapsed() <= 0 && this->elapsed() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_elapsed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Common)
  return target;
}

size_t Common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Common)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_name = 1;
  if (this->app_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_name());
  }

  // double elapsed = 3;
  if (!(this->elapsed() <= 0 && this->elapsed() >= 0)) {
    total_size += 1 + 8;
  }

  // uint32 step = 2;
  if (this->step() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_step());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Common::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Common)
  GOOGLE_DCHECK_NE(&from, this);
  const Common* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Common>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Common)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Common)
    MergeFrom(*source);
  }
}

void Common::MergeFrom(const Common& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Common)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.app_name().size() > 0) {

    app_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.app_name_);
  }
  if (!(from.elapsed() <= 0 && from.elapsed() >= 0)) {
    _internal_set_elapsed(from._internal_elapsed());
  }
  if (from.step() != 0) {
    _internal_set_step(from._internal_step());
  }
}

void Common::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Common::CopyFrom(const Common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Common::IsInitialized() const {
  return true;
}

void Common::InternalSwap(Common* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  app_name_.Swap(&other->app_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(elapsed_, other->elapsed_);
  swap(step_, other->step_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Common::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TimerTelemetry::InitAsDefaultInstance() {
  ::_TimerTelemetry_default_instance_._instance.get_mutable()->common_ = const_cast< ::Common*>(
      ::Common::internal_default_instance());
}
class TimerTelemetry::_Internal {
 public:
  static const ::Common& common(const TimerTelemetry* msg);
};

const ::Common&
TimerTelemetry::_Internal::common(const TimerTelemetry* msg) {
  return *msg->common_;
}
TimerTelemetry::TimerTelemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TimerTelemetry)
}
TimerTelemetry::TimerTelemetry(const TimerTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::Common(*from.common_);
  } else {
    common_ = nullptr;
  }
  ::memcpy(&duration_, &from.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&timer_type_) -
    reinterpret_cast<char*>(&duration_)) + sizeof(timer_type_));
  // @@protoc_insertion_point(copy_constructor:TimerTelemetry)
}

void TimerTelemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TimerTelemetry_collector_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_type_) -
      reinterpret_cast<char*>(&common_)) + sizeof(timer_type_));
}

TimerTelemetry::~TimerTelemetry() {
  // @@protoc_insertion_point(destructor:TimerTelemetry)
  SharedDtor();
}

void TimerTelemetry::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void TimerTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TimerTelemetry& TimerTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TimerTelemetry_collector_2eproto.base);
  return *internal_default_instance();
}


void TimerTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:TimerTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  ::memset(&duration_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timer_type_) -
      reinterpret_cast<char*>(&duration_)) + sizeof(timer_type_));
  _internal_metadata_.Clear();
}

const char* TimerTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .TimerType timer_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_timer_type(static_cast<::TimerType>(val));
        } else goto handle_unusual;
        continue;
      // double duration = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TimerTelemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TimerTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // .TimerType timer_type = 2;
  if (this->timer_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_timer_type(), target);
  }

  // double duration = 3;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TimerTelemetry)
  return target;
}

size_t TimerTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TimerTelemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // double duration = 3;
  if (!(this->duration() <= 0 && this->duration() >= 0)) {
    total_size += 1 + 8;
  }

  // .TimerType timer_type = 2;
  if (this->timer_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_timer_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TimerTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TimerTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const TimerTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TimerTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TimerTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TimerTelemetry)
    MergeFrom(*source);
  }
}

void TimerTelemetry::MergeFrom(const TimerTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TimerTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::Common::MergeFrom(from._internal_common());
  }
  if (!(from.duration() <= 0 && from.duration() >= 0)) {
    _internal_set_duration(from._internal_duration());
  }
  if (from.timer_type() != 0) {
    _internal_set_timer_type(from._internal_timer_type());
  }
}

void TimerTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TimerTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TimerTelemetry::CopyFrom(const TimerTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TimerTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TimerTelemetry::IsInitialized() const {
  return true;
}

void TimerTelemetry::InternalSwap(TimerTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(duration_, other->duration_);
  swap(timer_type_, other->timer_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TimerTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataSizeTelemetry::InitAsDefaultInstance() {
  ::_DataSizeTelemetry_default_instance_._instance.get_mutable()->common_ = const_cast< ::Common*>(
      ::Common::internal_default_instance());
}
class DataSizeTelemetry::_Internal {
 public:
  static const ::Common& common(const DataSizeTelemetry* msg);
};

const ::Common&
DataSizeTelemetry::_Internal::common(const DataSizeTelemetry* msg) {
  return *msg->common_;
}
DataSizeTelemetry::DataSizeTelemetry()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:DataSizeTelemetry)
}
DataSizeTelemetry::DataSizeTelemetry(const DataSizeTelemetry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_common()) {
    common_ = new ::Common(*from.common_);
  } else {
    common_ = nullptr;
  }
  size_ = from.size_;
  // @@protoc_insertion_point(copy_constructor:DataSizeTelemetry)
}

void DataSizeTelemetry::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataSizeTelemetry_collector_2eproto.base);
  ::memset(&common_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&size_) -
      reinterpret_cast<char*>(&common_)) + sizeof(size_));
}

DataSizeTelemetry::~DataSizeTelemetry() {
  // @@protoc_insertion_point(destructor:DataSizeTelemetry)
  SharedDtor();
}

void DataSizeTelemetry::SharedDtor() {
  if (this != internal_default_instance()) delete common_;
}

void DataSizeTelemetry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataSizeTelemetry& DataSizeTelemetry::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataSizeTelemetry_collector_2eproto.base);
  return *internal_default_instance();
}


void DataSizeTelemetry::Clear() {
// @@protoc_insertion_point(message_clear_start:DataSizeTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
  size_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear();
}

const char* DataSizeTelemetry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .Common common = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_common(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataSizeTelemetry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DataSizeTelemetry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .Common common = 1;
  if (this->has_common()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::common(this), target, stream);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DataSizeTelemetry)
  return target;
}

size_t DataSizeTelemetry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DataSizeTelemetry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Common common = 1;
  if (this->has_common()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *common_);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSizeTelemetry::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DataSizeTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSizeTelemetry* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataSizeTelemetry>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DataSizeTelemetry)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DataSizeTelemetry)
    MergeFrom(*source);
  }
}

void DataSizeTelemetry::MergeFrom(const DataSizeTelemetry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DataSizeTelemetry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_common()) {
    _internal_mutable_common()->::Common::MergeFrom(from._internal_common());
  }
  if (from.size() != 0) {
    _internal_set_size(from._internal_size());
  }
}

void DataSizeTelemetry::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DataSizeTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSizeTelemetry::CopyFrom(const DataSizeTelemetry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DataSizeTelemetry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSizeTelemetry::IsInitialized() const {
  return true;
}

void DataSizeTelemetry::InternalSwap(DataSizeTelemetry* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(common_, other->common_);
  swap(size_, other->size_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataSizeTelemetry::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TelemetryReply::InitAsDefaultInstance() {
}
class TelemetryReply::_Internal {
 public:
};

TelemetryReply::TelemetryReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:TelemetryReply)
}
TelemetryReply::TelemetryReply(const TelemetryReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TelemetryReply)
}

void TelemetryReply::SharedCtor() {
}

TelemetryReply::~TelemetryReply() {
  // @@protoc_insertion_point(destructor:TelemetryReply)
  SharedDtor();
}

void TelemetryReply::SharedDtor() {
}

void TelemetryReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TelemetryReply& TelemetryReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TelemetryReply_collector_2eproto.base);
  return *internal_default_instance();
}


void TelemetryReply::Clear() {
// @@protoc_insertion_point(message_clear_start:TelemetryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* TelemetryReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TelemetryReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TelemetryReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TelemetryReply)
  return target;
}

size_t TelemetryReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TelemetryReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TelemetryReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:TelemetryReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TelemetryReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TelemetryReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:TelemetryReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:TelemetryReply)
    MergeFrom(*source);
  }
}

void TelemetryReply::MergeFrom(const TelemetryReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:TelemetryReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void TelemetryReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:TelemetryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TelemetryReply::CopyFrom(const TelemetryReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TelemetryReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TelemetryReply::IsInitialized() const {
  return true;
}

void TelemetryReply::InternalSwap(TelemetryReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TelemetryReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Common* Arena::CreateMaybeMessage< ::Common >(Arena* arena) {
  return Arena::CreateInternal< ::Common >(arena);
}
template<> PROTOBUF_NOINLINE ::TimerTelemetry* Arena::CreateMaybeMessage< ::TimerTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::TimerTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::DataSizeTelemetry* Arena::CreateMaybeMessage< ::DataSizeTelemetry >(Arena* arena) {
  return Arena::CreateInternal< ::DataSizeTelemetry >(arena);
}
template<> PROTOBUF_NOINLINE ::TelemetryReply* Arena::CreateMaybeMessage< ::TelemetryReply >(Arena* arena) {
  return Arena::CreateInternal< ::TelemetryReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
