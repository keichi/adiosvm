// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: collector.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_collector_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_collector_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_collector_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_collector_2eproto;
class Common;
class CommonDefaultTypeInternal;
extern CommonDefaultTypeInternal _Common_default_instance_;
class DataSizeTelemetry;
class DataSizeTelemetryDefaultTypeInternal;
extern DataSizeTelemetryDefaultTypeInternal _DataSizeTelemetry_default_instance_;
class TelemetryReply;
class TelemetryReplyDefaultTypeInternal;
extern TelemetryReplyDefaultTypeInternal _TelemetryReply_default_instance_;
class TimerTelemetry;
class TimerTelemetryDefaultTypeInternal;
extern TimerTelemetryDefaultTypeInternal _TimerTelemetry_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::Common* Arena::CreateMaybeMessage<::Common>(Arena*);
template<> ::DataSizeTelemetry* Arena::CreateMaybeMessage<::DataSizeTelemetry>(Arena*);
template<> ::TelemetryReply* Arena::CreateMaybeMessage<::TelemetryReply>(Arena*);
template<> ::TimerTelemetry* Arena::CreateMaybeMessage<::TimerTelemetry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TimerType : int {
  READ_IO = 0,
  COMPUTE = 1,
  WRITE_IO = 2,
  TOTAL = 3,
  TimerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TimerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TimerType_IsValid(int value);
constexpr TimerType TimerType_MIN = READ_IO;
constexpr TimerType TimerType_MAX = TOTAL;
constexpr int TimerType_ARRAYSIZE = TimerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimerType_descriptor();
template<typename T>
inline const std::string& TimerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TimerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TimerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TimerType_descriptor(), enum_t_value);
}
inline bool TimerType_Parse(
    const std::string& name, TimerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TimerType>(
    TimerType_descriptor(), name, value);
}
// ===================================================================

class Common :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Common) */ {
 public:
  Common();
  virtual ~Common();

  Common(const Common& from);
  Common(Common&& from) noexcept
    : Common() {
    *this = ::std::move(from);
  }

  inline Common& operator=(const Common& from) {
    CopyFrom(from);
    return *this;
  }
  inline Common& operator=(Common&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Common& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Common* internal_default_instance() {
    return reinterpret_cast<const Common*>(
               &_Common_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Common& a, Common& b) {
    a.Swap(&b);
  }
  inline void Swap(Common* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Common* New() const final {
    return CreateMaybeMessage<Common>(nullptr);
  }

  Common* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Common>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Common& from);
  void MergeFrom(const Common& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Common* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Common";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppNameFieldNumber = 1,
    kElapsedFieldNumber = 3,
    kStepFieldNumber = 2,
  };
  // string app_name = 1;
  void clear_app_name();
  const std::string& app_name() const;
  void set_app_name(const std::string& value);
  void set_app_name(std::string&& value);
  void set_app_name(const char* value);
  void set_app_name(const char* value, size_t size);
  std::string* mutable_app_name();
  std::string* release_app_name();
  void set_allocated_app_name(std::string* app_name);
  private:
  const std::string& _internal_app_name() const;
  void _internal_set_app_name(const std::string& value);
  std::string* _internal_mutable_app_name();
  public:

  // double elapsed = 3;
  void clear_elapsed();
  double elapsed() const;
  void set_elapsed(double value);
  private:
  double _internal_elapsed() const;
  void _internal_set_elapsed(double value);
  public:

  // uint32 step = 2;
  void clear_step();
  ::PROTOBUF_NAMESPACE_ID::uint32 step() const;
  void set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_step() const;
  void _internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:Common)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_name_;
  double elapsed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 step_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class TimerTelemetry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TimerTelemetry) */ {
 public:
  TimerTelemetry();
  virtual ~TimerTelemetry();

  TimerTelemetry(const TimerTelemetry& from);
  TimerTelemetry(TimerTelemetry&& from) noexcept
    : TimerTelemetry() {
    *this = ::std::move(from);
  }

  inline TimerTelemetry& operator=(const TimerTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline TimerTelemetry& operator=(TimerTelemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TimerTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimerTelemetry* internal_default_instance() {
    return reinterpret_cast<const TimerTelemetry*>(
               &_TimerTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TimerTelemetry& a, TimerTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(TimerTelemetry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TimerTelemetry* New() const final {
    return CreateMaybeMessage<TimerTelemetry>(nullptr);
  }

  TimerTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TimerTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TimerTelemetry& from);
  void MergeFrom(const TimerTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimerTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TimerTelemetry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kDurationFieldNumber = 3,
    kTimerTypeFieldNumber = 2,
  };
  // .Common common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::Common& common() const;
  ::Common* release_common();
  ::Common* mutable_common();
  void set_allocated_common(::Common* common);
  private:
  const ::Common& _internal_common() const;
  ::Common* _internal_mutable_common();
  public:

  // double duration = 3;
  void clear_duration();
  double duration() const;
  void set_duration(double value);
  private:
  double _internal_duration() const;
  void _internal_set_duration(double value);
  public:

  // .TimerType timer_type = 2;
  void clear_timer_type();
  ::TimerType timer_type() const;
  void set_timer_type(::TimerType value);
  private:
  ::TimerType _internal_timer_type() const;
  void _internal_set_timer_type(::TimerType value);
  public:

  // @@protoc_insertion_point(class_scope:TimerTelemetry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Common* common_;
  double duration_;
  int timer_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class DataSizeTelemetry :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DataSizeTelemetry) */ {
 public:
  DataSizeTelemetry();
  virtual ~DataSizeTelemetry();

  DataSizeTelemetry(const DataSizeTelemetry& from);
  DataSizeTelemetry(DataSizeTelemetry&& from) noexcept
    : DataSizeTelemetry() {
    *this = ::std::move(from);
  }

  inline DataSizeTelemetry& operator=(const DataSizeTelemetry& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSizeTelemetry& operator=(DataSizeTelemetry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataSizeTelemetry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSizeTelemetry* internal_default_instance() {
    return reinterpret_cast<const DataSizeTelemetry*>(
               &_DataSizeTelemetry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataSizeTelemetry& a, DataSizeTelemetry& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSizeTelemetry* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataSizeTelemetry* New() const final {
    return CreateMaybeMessage<DataSizeTelemetry>(nullptr);
  }

  DataSizeTelemetry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataSizeTelemetry>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataSizeTelemetry& from);
  void MergeFrom(const DataSizeTelemetry& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSizeTelemetry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DataSizeTelemetry";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommonFieldNumber = 1,
    kSizeFieldNumber = 2,
  };
  // .Common common = 1;
  bool has_common() const;
  private:
  bool _internal_has_common() const;
  public:
  void clear_common();
  const ::Common& common() const;
  ::Common* release_common();
  ::Common* mutable_common();
  void set_allocated_common(::Common* common);
  private:
  const ::Common& _internal_common() const;
  ::Common* _internal_mutable_common();
  public:

  // uint64 size = 2;
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:DataSizeTelemetry)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::Common* common_;
  ::PROTOBUF_NAMESPACE_ID::uint64 size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// -------------------------------------------------------------------

class TelemetryReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TelemetryReply) */ {
 public:
  TelemetryReply();
  virtual ~TelemetryReply();

  TelemetryReply(const TelemetryReply& from);
  TelemetryReply(TelemetryReply&& from) noexcept
    : TelemetryReply() {
    *this = ::std::move(from);
  }

  inline TelemetryReply& operator=(const TelemetryReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TelemetryReply& operator=(TelemetryReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TelemetryReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TelemetryReply* internal_default_instance() {
    return reinterpret_cast<const TelemetryReply*>(
               &_TelemetryReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TelemetryReply& a, TelemetryReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TelemetryReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TelemetryReply* New() const final {
    return CreateMaybeMessage<TelemetryReply>(nullptr);
  }

  TelemetryReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TelemetryReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TelemetryReply& from);
  void MergeFrom(const TelemetryReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TelemetryReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TelemetryReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_collector_2eproto);
    return ::descriptor_table_collector_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:TelemetryReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_collector_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Common

// string app_name = 1;
inline void Common::clear_app_name() {
  app_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Common::app_name() const {
  // @@protoc_insertion_point(field_get:Common.app_name)
  return _internal_app_name();
}
inline void Common::set_app_name(const std::string& value) {
  _internal_set_app_name(value);
  // @@protoc_insertion_point(field_set:Common.app_name)
}
inline std::string* Common::mutable_app_name() {
  // @@protoc_insertion_point(field_mutable:Common.app_name)
  return _internal_mutable_app_name();
}
inline const std::string& Common::_internal_app_name() const {
  return app_name_.GetNoArena();
}
inline void Common::_internal_set_app_name(const std::string& value) {
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Common::set_app_name(std::string&& value) {
  
  app_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Common.app_name)
}
inline void Common::set_app_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Common.app_name)
}
inline void Common::set_app_name(const char* value, size_t size) {
  
  app_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Common.app_name)
}
inline std::string* Common::_internal_mutable_app_name() {
  
  return app_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Common::release_app_name() {
  // @@protoc_insertion_point(field_release:Common.app_name)
  
  return app_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Common::set_allocated_app_name(std::string* app_name) {
  if (app_name != nullptr) {
    
  } else {
    
  }
  app_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_name);
  // @@protoc_insertion_point(field_set_allocated:Common.app_name)
}

// uint32 step = 2;
inline void Common::clear_step() {
  step_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Common::_internal_step() const {
  return step_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Common::step() const {
  // @@protoc_insertion_point(field_get:Common.step)
  return _internal_step();
}
inline void Common::_internal_set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  step_ = value;
}
inline void Common::set_step(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_step(value);
  // @@protoc_insertion_point(field_set:Common.step)
}

// double elapsed = 3;
inline void Common::clear_elapsed() {
  elapsed_ = 0;
}
inline double Common::_internal_elapsed() const {
  return elapsed_;
}
inline double Common::elapsed() const {
  // @@protoc_insertion_point(field_get:Common.elapsed)
  return _internal_elapsed();
}
inline void Common::_internal_set_elapsed(double value) {
  
  elapsed_ = value;
}
inline void Common::set_elapsed(double value) {
  _internal_set_elapsed(value);
  // @@protoc_insertion_point(field_set:Common.elapsed)
}

// -------------------------------------------------------------------

// TimerTelemetry

// .Common common = 1;
inline bool TimerTelemetry::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool TimerTelemetry::has_common() const {
  return _internal_has_common();
}
inline void TimerTelemetry::clear_common() {
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::Common& TimerTelemetry::_internal_common() const {
  const ::Common* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Common*>(
      &::_Common_default_instance_);
}
inline const ::Common& TimerTelemetry::common() const {
  // @@protoc_insertion_point(field_get:TimerTelemetry.common)
  return _internal_common();
}
inline ::Common* TimerTelemetry::release_common() {
  // @@protoc_insertion_point(field_release:TimerTelemetry.common)
  
  ::Common* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::Common* TimerTelemetry::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common>(GetArenaNoVirtual());
    common_ = p;
  }
  return common_;
}
inline ::Common* TimerTelemetry::mutable_common() {
  // @@protoc_insertion_point(field_mutable:TimerTelemetry.common)
  return _internal_mutable_common();
}
inline void TimerTelemetry::set_allocated_common(::Common* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:TimerTelemetry.common)
}

// .TimerType timer_type = 2;
inline void TimerTelemetry::clear_timer_type() {
  timer_type_ = 0;
}
inline ::TimerType TimerTelemetry::_internal_timer_type() const {
  return static_cast< ::TimerType >(timer_type_);
}
inline ::TimerType TimerTelemetry::timer_type() const {
  // @@protoc_insertion_point(field_get:TimerTelemetry.timer_type)
  return _internal_timer_type();
}
inline void TimerTelemetry::_internal_set_timer_type(::TimerType value) {
  
  timer_type_ = value;
}
inline void TimerTelemetry::set_timer_type(::TimerType value) {
  _internal_set_timer_type(value);
  // @@protoc_insertion_point(field_set:TimerTelemetry.timer_type)
}

// double duration = 3;
inline void TimerTelemetry::clear_duration() {
  duration_ = 0;
}
inline double TimerTelemetry::_internal_duration() const {
  return duration_;
}
inline double TimerTelemetry::duration() const {
  // @@protoc_insertion_point(field_get:TimerTelemetry.duration)
  return _internal_duration();
}
inline void TimerTelemetry::_internal_set_duration(double value) {
  
  duration_ = value;
}
inline void TimerTelemetry::set_duration(double value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:TimerTelemetry.duration)
}

// -------------------------------------------------------------------

// DataSizeTelemetry

// .Common common = 1;
inline bool DataSizeTelemetry::_internal_has_common() const {
  return this != internal_default_instance() && common_ != nullptr;
}
inline bool DataSizeTelemetry::has_common() const {
  return _internal_has_common();
}
inline void DataSizeTelemetry::clear_common() {
  if (GetArenaNoVirtual() == nullptr && common_ != nullptr) {
    delete common_;
  }
  common_ = nullptr;
}
inline const ::Common& DataSizeTelemetry::_internal_common() const {
  const ::Common* p = common_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Common*>(
      &::_Common_default_instance_);
}
inline const ::Common& DataSizeTelemetry::common() const {
  // @@protoc_insertion_point(field_get:DataSizeTelemetry.common)
  return _internal_common();
}
inline ::Common* DataSizeTelemetry::release_common() {
  // @@protoc_insertion_point(field_release:DataSizeTelemetry.common)
  
  ::Common* temp = common_;
  common_ = nullptr;
  return temp;
}
inline ::Common* DataSizeTelemetry::_internal_mutable_common() {
  
  if (common_ == nullptr) {
    auto* p = CreateMaybeMessage<::Common>(GetArenaNoVirtual());
    common_ = p;
  }
  return common_;
}
inline ::Common* DataSizeTelemetry::mutable_common() {
  // @@protoc_insertion_point(field_mutable:DataSizeTelemetry.common)
  return _internal_mutable_common();
}
inline void DataSizeTelemetry::set_allocated_common(::Common* common) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete common_;
  }
  if (common) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      common = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, common, submessage_arena);
    }
    
  } else {
    
  }
  common_ = common;
  // @@protoc_insertion_point(field_set_allocated:DataSizeTelemetry.common)
}

// uint64 size = 2;
inline void DataSizeTelemetry::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSizeTelemetry::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 DataSizeTelemetry::size() const {
  // @@protoc_insertion_point(field_get:DataSizeTelemetry.size)
  return _internal_size();
}
inline void DataSizeTelemetry::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  size_ = value;
}
inline void DataSizeTelemetry::set_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:DataSizeTelemetry.size)
}

// -------------------------------------------------------------------

// TelemetryReply

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TimerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TimerType>() {
  return ::TimerType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_collector_2eproto
