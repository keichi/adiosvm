// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: collector.proto

#include "collector.pb.h"
#include "collector.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>

static const char* YuzuCollector_method_names[] = {
  "/YuzuCollector/ReportTimer",
  "/YuzuCollector/ReportDataSize",
};

std::unique_ptr< YuzuCollector::Stub> YuzuCollector::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< YuzuCollector::Stub> stub(new YuzuCollector::Stub(channel));
  return stub;
}

YuzuCollector::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ReportTimer_(YuzuCollector_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ReportDataSize_(YuzuCollector_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status YuzuCollector::Stub::ReportTimer(::grpc::ClientContext* context, const ::TimerTelemetry& request, ::TelemetryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportTimer_, context, request, response);
}

void YuzuCollector::Stub::experimental_async::ReportTimer(::grpc::ClientContext* context, const ::TimerTelemetry* request, ::TelemetryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTimer_, context, request, response, std::move(f));
}

void YuzuCollector::Stub::experimental_async::ReportTimer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TelemetryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportTimer_, context, request, response, std::move(f));
}

void YuzuCollector::Stub::experimental_async::ReportTimer(::grpc::ClientContext* context, const ::TimerTelemetry* request, ::TelemetryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTimer_, context, request, response, reactor);
}

void YuzuCollector::Stub::experimental_async::ReportTimer(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TelemetryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportTimer_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TelemetryReply>* YuzuCollector::Stub::AsyncReportTimerRaw(::grpc::ClientContext* context, const ::TimerTelemetry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TelemetryReply>::Create(channel_.get(), cq, rpcmethod_ReportTimer_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TelemetryReply>* YuzuCollector::Stub::PrepareAsyncReportTimerRaw(::grpc::ClientContext* context, const ::TimerTelemetry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TelemetryReply>::Create(channel_.get(), cq, rpcmethod_ReportTimer_, context, request, false);
}

::grpc::Status YuzuCollector::Stub::ReportDataSize(::grpc::ClientContext* context, const ::DataSizeTelemetry& request, ::TelemetryReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ReportDataSize_, context, request, response);
}

void YuzuCollector::Stub::experimental_async::ReportDataSize(::grpc::ClientContext* context, const ::DataSizeTelemetry* request, ::TelemetryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportDataSize_, context, request, response, std::move(f));
}

void YuzuCollector::Stub::experimental_async::ReportDataSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TelemetryReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc_impl::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ReportDataSize_, context, request, response, std::move(f));
}

void YuzuCollector::Stub::experimental_async::ReportDataSize(::grpc::ClientContext* context, const ::DataSizeTelemetry* request, ::TelemetryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportDataSize_, context, request, response, reactor);
}

void YuzuCollector::Stub::experimental_async::ReportDataSize(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::TelemetryReply* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc_impl::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_ReportDataSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::TelemetryReply>* YuzuCollector::Stub::AsyncReportDataSizeRaw(::grpc::ClientContext* context, const ::DataSizeTelemetry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TelemetryReply>::Create(channel_.get(), cq, rpcmethod_ReportDataSize_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::TelemetryReply>* YuzuCollector::Stub::PrepareAsyncReportDataSizeRaw(::grpc::ClientContext* context, const ::DataSizeTelemetry& request, ::grpc::CompletionQueue* cq) {
  return ::grpc_impl::internal::ClientAsyncResponseReaderFactory< ::TelemetryReply>::Create(channel_.get(), cq, rpcmethod_ReportDataSize_, context, request, false);
}

YuzuCollector::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      YuzuCollector_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< YuzuCollector::Service, ::TimerTelemetry, ::TelemetryReply>(
          std::mem_fn(&YuzuCollector::Service::ReportTimer), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      YuzuCollector_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< YuzuCollector::Service, ::DataSizeTelemetry, ::TelemetryReply>(
          std::mem_fn(&YuzuCollector::Service::ReportDataSize), this)));
}

YuzuCollector::Service::~Service() {
}

::grpc::Status YuzuCollector::Service::ReportTimer(::grpc::ServerContext* context, const ::TimerTelemetry* request, ::TelemetryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status YuzuCollector::Service::ReportDataSize(::grpc::ServerContext* context, const ::DataSizeTelemetry* request, ::TelemetryReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


